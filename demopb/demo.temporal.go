// Code generated by protoc-gen-temporal. DO NOT EDIT."
// source: demo.proto

package demopb

import (
	"context"
	"errors"

	"go.temporal.io/sdk/client"
	"go.temporal.io/sdk/worker"
	"go.temporal.io/sdk/workflow"
)

type DemoWorker interface {
	HelloWorld(ctx workflow.Context, req *HelloWorldRequest) (*HelloWorldResponse, error)
}

type UnimplementedDemoWorker struct {
}

func (wrk *UnimplementedDemoWorker) HelloWorld(ctx workflow.Context, req *HelloWorldRequest) (*HelloWorldResponse, error) {
	return nil, errors.New("Unimplemented")
}

func RegisterDemoWorker(w worker.Worker, wrk DemoWorker) {

	w.RegisterWorkflowWithOptions(wrk.HelloWorld, workflow.RegisterOptions{Name: "Demo.HelloWorld"})

}

// --------------------------------------- //

type DemoClient struct {
	client client.Client
}

func NewDemoClient(client client.Client) *DemoClient {
	return &DemoClient{
		client: client,
	}
}

func (clt *DemoClient) HelloWorld(ctx context.Context, options client.StartWorkflowOptions, req *HelloWorldRequest) (DemoWorkflowRun[HelloWorldResponse], error) {
	wr, err := clt.client.ExecuteWorkflow(ctx, options, "Demo.HelloWorld", req)
	return DemoWorkflowRun[HelloWorldResponse]{WorkflowRun: wr}, err
}

// --------------------------------------- //

type DemoWorkflowRun[T any] struct {
	client.WorkflowRun
}

func (wr *DemoWorkflowRun[T]) Get(ctx context.Context, valuePtr *T) error {
	return wr.WorkflowRun.Get(ctx, valuePtr)
}

func (wr *DemoWorkflowRun[T]) GetWithOptions(ctx context.Context, res *T, options client.WorkflowRunGetOptions) error {
	return wr.WorkflowRun.GetWithOptions(ctx, res, options)
}
