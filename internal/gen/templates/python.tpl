# Code generated by protoc-gen-python-temporal. DO NOT EDIT."
# source: {{.File.Proto.Name}}
{{- $packageName := .File.Proto.Name | PackageName}}
{{- $importName := .File.Proto.Name | ImportName}}

import {{$packageName}} as {{$importName}}
from temporalio import workflow
from temporalio.client import Client
from typing import Any, Coroutine, Self, Type
from temporalio.types import CallableAsyncType

{{- range $service := .File.Services}}
{{- range $method := $service.Methods}}

def {{$service.GoName}}_{{$method.GoName}}(cls: Type) -> Type:
    return workflow.defn(name="{{$service.GoName}}.{{$method.GoName}}")(cls)

def {{$service.GoName}}_{{$method.GoName}}_run(f: CallableAsyncType[[{{$importName}}.{{$method.Input.GoIdent.GoName}}], {{"demo__pb2"}}.{{$method.Input.GoIdent.GoName}}]) -> CallableAsyncType[[{{"demo__pb2"}}.{{$method.Input.GoIdent.GoName}}], {{"demo__pb2"}}.{{$method.Input.GoIdent.GoName}}]:
    return workflow.run(f)
          

class DemoClient:
    def __init__(self: Self, client: Client):
        self.client = client

    def {{$service.GoName}}_{{$method.GoName}}(self, request: {{$importName}}.{{$method.Input.GoIdent.GoName}}) -> Coroutine[Any, Any, {{"demo__pb2"}}.{{$method.Input.GoIdent.GoName}}]:
        return self.client.execute_workflow("{{$service.GoName}}.{{$method.GoName}}", request)
	
{{- end}}
{{- end}}
