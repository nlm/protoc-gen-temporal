// Code generated by protoc-gen-go-temporal. DO NOT EDIT."
// source: {{.File.Proto.Name}}

package {{.File.GoPackageName}}

import (
	"context"
	"errors"

	"go.temporal.io/sdk/client"
	"go.temporal.io/sdk/worker"
	"go.temporal.io/sdk/workflow"
)

{{range $service := .File.Services}}
// {{$service.GoName}}Worker is the interface for temporal workers of the {{$service.GoName}} service.
type {{$service.GoName}}Worker interface {
	{{range $method := $service.Methods}}
	{{$method.GoName}}(ctx workflow.Context, req *{{$method.Input.GoIdent.GoName}}) (*{{$method.Output.GoIdent.GoName}}, error)
	{{end}}
}

// Unimplemented{{$service.GoName}}Worker is an empty emplementation of {{$service.GoName}}Worker interface.
type Unimplemented{{$service.GoName}}Worker struct {
}

{{range $method := $service.Methods}}
func (wrk *Unimplemented{{$service.GoName}}Worker) {{$method.GoName}}(ctx workflow.Context, req *{{$method.Input.GoIdent.GoName}}) (*{{$method.Output.GoIdent.GoName}}, error) {
	return nil, errors.New("Unimplemented")
}
{{end}}

func Register{{$service.GoName}}Worker(w worker.Worker, wrk {{$service.GoName}}Worker) { {{range $method := .Methods}}
	w.RegisterWorkflowWithOptions(wrk.{{$method.GoName}}, workflow.RegisterOptions{Name: "{{$service.GoName}}.{{$method.GoName}}"}){{end}}
}

type {{$service.GoName}}Client struct {
	client client.Client
}

func New{{$service.GoName}}Client(client client.Client) *{{$service.GoName}}Client {
	return &{{$service.GoName}}Client{
		client: client,
	}
}

{{range $method := .Methods}}
func (clt *{{$service.GoName}}Client) {{$method.GoName}}(ctx context.Context, options client.StartWorkflowOptions, req *{{$method.Input.GoIdent.GoName}}) ({{$service.GoName}}WorkflowRun[{{$method.Output.GoIdent.GoName}}], error) {
	wr, err := clt.client.ExecuteWorkflow(ctx, options, "{{$service.GoName}}.{{$method.GoName}}", req)
	return {{$service.GoName}}WorkflowRun[{{$method.Output.GoIdent.GoName}}]{WorkflowRun: wr}, err
}
{{end}}

type {{$service.GoName}}WorkflowRun[T any] struct {
	client.WorkflowRun
}

func (wr *{{$service.GoName}}WorkflowRun[T]) Get(ctx context.Context, valuePtr *T) error {
	return wr.WorkflowRun.Get(ctx, valuePtr)
}

func (wr *{{$service.GoName}}WorkflowRun[T]) GetWithOptions(ctx context.Context, res *T, options client.WorkflowRunGetOptions) error {
	return wr.WorkflowRun.GetWithOptions(ctx, res, options)
}

{{end}}
